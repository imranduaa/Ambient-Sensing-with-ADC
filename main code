/*
 * Starter code for ECE 266 Lab 6, main.c, spring 2024
 *
 * Lab 6: Ambient Sensing (ADC)
 *
 * Created by Zhao Zhang
 */

#include <stdint.h>
#include <stdbool.h>
#include <stdio.h>
#include "launchpad.h"
#include "seg7.h"
#include "temp_sensor.h"
#include "light_sensor.h"

// The state of the 7-segment display. Initially it shows "00:00" with the colon turned on.
Seg7Display seg7 = { { 10, 10, 10, 10 }, false /* colon on */};

// The events
Event tsensor_trigger_reading_event;
Event tsensor_check_reading_event;
Event tsensor_display_update_event;
Event lsensor_trigger_reading_event;
Event lsensor_check_reading_event;



/*
 * Trigger the temperature sensor reading periodically
 */
void TsTriggerReading(Event *event)
{
    // Trigger ADC sampling for the temperature sensor
    TsTriggerSampling();

    // Schedule the next callback in 1000 milliseconds
    EventSchedule(event, event->time + 4000);
}

/*
 * Check temperature sensor reading, print if ready
 */
void TsProcessReading(Event *event)
{
    // Get the current reading and convert it to temperature in Celsius
    // See Tiva C datasheet (ver. DS-TM4C123GH6PM-15842.2741), page 813
    uint32_t raw_data = TsReadData();
    float temp_C = 147.5 - (75 * 3.3 * raw_data / 4096);
    float temp_F = (temp_C * (9/5)) + 32;

    // Print on terminal. Note: TivaWare printf() has issue with "%f"
    uprintf("Temperature Sensor Reading: %u.%u F\r\n", (uint32_t)temp_F, (uint32_t)(temp_F*10)%10);


    seg7.digit[3] = (uint32_t)(temp_F/10)%10;
    seg7.digit[2] = (uint32_t)(temp_F)%10;
    seg7.digit[1] = (uint32_t)(temp_F*10)%10;
    seg7.digit[0] = 10;
    seg7.colon_on = true;

    Seg7Update(&seg7);
}
void LsTriggerReading(Event *event)
{
    // Trigger ADC sampling for the light sensor
    LsTriggerSampling();

    // Schedule the next callback in 4000 milliseconds (every four seconds)
    EventSchedule(event, event->time + 4000);
}

/*
 * Check light sensor reading, print if ready
 */
void LsProcessReading(Event *event) {
    // Get the current reading from the light sensor
    uint32_t raw_data = LsReadData();
    Seg7Display seg7 = { { 10, 10, 10, 10 }, false /* colon off */ };

    // Print light sensor reading on the terminal
    seg7.digit[3] = (raw_data >= 1000) ? raw_data / 1000 : 10; // Fourth digit (thousands place)
    seg7.digit[2] = (raw_data >= 100) ? (raw_data % 1000) / 100 : 10; // Third digit (hundreds place)
    seg7.digit[1] = (raw_data >= 10) ? (raw_data % 100) / 10 : 10;   // Second digit (tens place)
    seg7.digit[0] = raw_data % 10;           // First digit (units place)
    seg7.colon_on = 0;                        // Turn off colon indicator

    // Update the segment display
    Seg7Update(&seg7);

    // Print on terminal. Note: TivaWare printf() has issues with "%f"
    uprintf("Light Sensor Reading: %u \r\n", (uint32_t)raw_data);
}

int main(void)
{
    LaunchPadInit();
    TsInit();
    LsInit();
    Seg7Init();

    // Initialize the event objects
    EventInit(&tsensor_trigger_reading_event, TsTriggerReading);
    EventInit(&tsensor_check_reading_event, TsProcessReading);
    EventInit(&tsensor_trigger_reading_event, TsTriggerReading);
    EventInit(&lsensor_trigger_reading_event, LsTriggerReading);
    EventInit(&lsensor_check_reading_event, LsProcessReading);
    // Register ISR event
    TsEventRegister(&tsensor_check_reading_event);
    LsEventRegister(&lsensor_check_reading_event);


    // Schedule time event
    EventSchedule(&tsensor_trigger_reading_event, 100);
    EventSchedule(&lsensor_trigger_reading_event, 4095);

    uprintf("%s\n\r", "Lab 6: Ambient Sensing (ADC)");

    // Loop forever
    while (true)
    {
        // Wait for interrupt to happen
        __asm("    wfi");

        // Call the callback scheduler
        EventExecute();
    }
}
